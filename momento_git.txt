Identification sur git
git config --global user.name "John Doe"
git config --global user.email johndoe@exemple.com

--global nous permet de faire les réglages une seule fois.

git config --list permet de vérifier si les paramétres sont ok

Activation des couleurs
git config --global color.diff auto
git config --global color.status auto
git config --global color.branch auto

Par défaut, Git utilisera Vim comme éditeur et Vimdiff comme outil de merge. Vous pouvez les modifier en utilisant :
git config --global core.editor notepad++
git config --global merge.tool vimdiff

Initialiser un dépot git
git init

git remote add <nom> <url> permet de dire au dépot que l'on pointe vers le sépot distant.

git gère les versions de nos travaux locaux à travers 3 zones locales majeurs:
 le répertoire de travail (working directory/WD)
 l'index, ou stage (tous les fichies modifiés que nous voulons voir apparaitre dans notre prochain commit: git add)
 le dépôt local (Git directory/repository) (se fait avec la commande git commit)

 Pour accéder au historique de commit et afficher toutes nos actions et leurs SHA
 git reflog

Pour supprimer une branche :
git branch -d <nom-branch>
Pour forcer la suppression:
git branch -D <nom-branch>

Pour ajouter un fichier sur le stage:
git add nom-fichier

Pour mettre de côté une modification de côté (créer une remise):
git stash

Pour lister tous les remises:
git stash list

Pour appliquer la dernière remis:
git stash apply

Pour appliquer une remise spécifique:
git stash apply stash@{1} (le 1 signifie le numéro du stash)
